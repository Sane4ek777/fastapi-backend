import sqlite3
from fastapi import APIRouter
from config import DB_FILE
from logger import logger

router = APIRouter()

@router.get("/categories")
def get_categories():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤–∏–¥–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    logger.info("Fetching product categories from the database...")

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    cursor.execute("""
        SELECT category_id, COUNT(*) as count
        FROM products
        GROUP BY category_id
    """)
    product_counts_raw = cursor.fetchall()
    product_counts = {cat_id: count for cat_id, count in product_counts_raw}

    # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT id, name, slug, parent_id FROM categories")
    rows = cursor.fetchall()

    categories = {}

    # –°—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å categories —Å id –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
    for row in rows:
        cat_id, name, slug, parent_id = row
        categories[cat_id] = {
            "id": cat_id,
            "name": name,
            "slug": slug,
            "parent_id": parent_id,
            "product_count": product_counts.get(cat_id, 0),  # üëà –¥–æ–±–∞–≤–∏–ª–∏
            "subcategories": {}
        }

    # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    structured_categories = {}

    for cat_id, data in categories.items():
        parent_id = data["parent_id"]
        if parent_id is None:
            structured_categories[cat_id] = data  # –≠—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        else:
            if parent_id in categories:
                categories[parent_id]["subcategories"][cat_id] = data

    conn.close()
    logger.info(f"Fetched {len(structured_categories)} main categories with product counts.")
    return structured_categories



def move_subcategory():
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é '–í–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∏' –∏–∑ '–í–∏–±—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞' –≤ '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'"""
    logger.info("Moving subcategory '–í–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∏' to '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'...")

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–í–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∏" –ø–æ slug
        cursor.execute("SELECT id FROM categories WHERE slug = ?", ("–í–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∏",))
        subcategory = cursor.fetchone()
        if not subcategory:
            logger.warning("Subcategory '–í–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∏' not found!")
            return

        subcategory_id = subcategory[0]

        # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ" –ø–æ slug
        cursor.execute("SELECT id FROM categories WHERE slug = ?", ("–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",))
        new_parent = cursor.fetchone()
        if not new_parent:
            logger.warning("Category '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' not found!")
            return

        new_parent_id = new_parent[0]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É "–í–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∏"
        cursor.execute("UPDATE categories SET parent_id = ? WHERE id = ?", (new_parent_id, subcategory_id))
        conn.commit()

        logger.info(f"Successfully moved '–í–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∏' under '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'.")

    except sqlite3.Error as e:
        logger.error(f"SQLite error while moving subcategory: {str(e)}")
    finally:
        conn.close()


@router.post("/move_subcategory")
def move_subcategory_endpoint():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    move_subcategory()
    return {"message": "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '–í–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∏' –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'!"}
